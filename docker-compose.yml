version: '3.8'
services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5

  airflow-webserver:
    image: apache/airflow:2.6.2
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      PYTHONPATH: "/opt/airflow:/opt/airflow/dags:/opt/airflow/plugins:${PYTHONPATH}"
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 60
    volumes:
      - ./dags:/opt/airflow/dags
      - ./multimodal_rag_system.py:/opt/airflow/multimodal_rag_system.py
      - ./data/rag_chroma_db:/opt/airflow/data/rag_chroma_db
      - ./airflow_logs:/opt/airflow/logs
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3

  airflow-scheduler:
    image: apache/airflow:2.6.2
    depends_on:
      postgres:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      PYTHONPATH: "/opt/airflow:/opt/airflow/dags:/opt/airflow/plugins:${PYTHONPATH}"
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    volumes:
      - ./dags:/opt/airflow/dags
      - ./multimodal_rag_system.py:/opt/airflow/multimodal_rag_system.py
      - ./data/rag_chroma_db:/opt/airflow/data/rag_chroma_db
      - ./airflow_logs:/opt/airflow/logs
    command: scheduler

volumes:
  postgres_data:
  chroma_data:
  airflow_logs: